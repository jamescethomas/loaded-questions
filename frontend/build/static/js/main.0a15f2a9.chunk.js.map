{"version":3,"sources":["logo.svg","components/Nav.js","pages/Home.js","actions/actions.js","pages/Join.js","pages/Create.js","components/AskQuestion.js","components/Question.js","components/WaitingForAnswers.js","components/WaitingForNextTurn.js","components/AnswerQuestion.js","components/Answer.js","components/Answers.js","components/ResultsRow.js","components/Results.js","components/FinalResults.js","pages/Game.js","App.js","serviceWorker.js","config.js","reducers/reducers.js","index.js"],"names":["module","exports","Nav","this","props","history","push","className","onClick","onHomeClicked","bind","Component","withRouter","Home","href","SET_GAME_STATE","SET_PLAYERLESS_GAME_STATE","setGameState","gameState","type","setPlayerlessGameState","playerlessGameState","classes","makeStyles","Join","state","name","nameError","code","codeError","element","setState","target","value","error","length","fetch","method","headers","body","JSON","stringify","then","response","statusCode","status","data","json","Promise","all","prevState","actions","root","Grid","container","spacing","item","xs","TextField","id","label","variant","fullWidth","vale","onChange","onCodeChange","onNameChange","Button","color","onJoinClick","connect","dispatch","bindActionCreators","Create","res","console","log","onCreateClick","AskQuestion","onKeyDown","question","questionError","document","addEventListener","removeEventListener","event","key","onSubmitQuestion","preventDefault","token","player","Paper","onKeyPress","multiline","rowsMax","onQuestionChange","Question","guesser","i","players","role","game","currentQuestion","WaitingForAnswers","answers","splice","text","WaitingForNextTurn","onSubmit","AnswerQuestion","answer","answerError","Answer","flip","selection","answerToken","items","MenuItem","answeringPlayers","cardClass","onCardClick","itme","Select","labelId","onSelection","renderMenuItems","Answers","guesserToken","disableSubmit","clearedValue","ref","refs","getValue","clearValue","allHaveValues","hasValue","getCorrectAnswerToken","guess","answerCards","disabled","ResultsRow","wasClicked","likeButtonClass","likeButton","playerToken","TableCell","align","onLikeButtonClick","icon","faThumbsUp","TableRow","rowClass","guessedCorrectly","Results","playerHash","score","results","result","bonusRow","bonusScore","totalRow","Table","aria-label","TableHead","TableBody","FinalResults","sort","a","b","rows","scoreToRank","rank","faCrown","likes","renderScores","renderLikes","PLAYING_STATES","Game","openEndGameDialog","handleEndGameDialogClose","stompMessage","newGameState","parse","leader","reader","faGlobeAmericas","hasAnswered","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","onEndGame","autoFocus","onEndGameClick","isLeader","iconElement","faStar","indexOf","faBook","faArrowRight","playerRowClass","mainView","renderMainView","endGameButton","renderEndGameButtom","endpoint","topic","onMessage","handleMessage","onStartGameClick","theme","createMuiTheme","flexGrow","palette","primary","blue","secondary","red","danger","ThemeProvider","exact","path","component","Boolean","window","location","hostname","match","reducers","combineReducers","action","cookies","Cookies","set","config","tempState","get","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0a15f2a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass Nav extends Component {\n  onHomeClicked() {\n    this.props.history.push('/');\n  }\n\n  render() {\n    return <div className=\"nav\">\n      <div\n      onClick={this.onHomeClicked.bind(this)}\n      >Loaded questions</div>\n    </div>\n  }\n}\n\nexport default withRouter(Nav);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n  return <div className=\"App-header\">\n      <a\n        className=\"App-link\"\n        href=\"/join\"\n      >\n        Join game\n      </a>\n      <br/>\n      <a\n        className=\"App-link\"\n        href=\"/create\"\n      >\n        Create game\n      </a>\n    </div>\n  }\n}\n\nexport default withRouter(Home);\n","/*\n * action types\n */\nexport const SET_GAME_STATE = 'SET_GAME_STATE'\nexport const SET_PLAYERLESS_GAME_STATE = 'SET_PLAYERLESS_GAME_STATE'\n\n/*\n * action creators\n */\nexport function setGameState(gameState) {\n  return { type: SET_GAME_STATE, gameState }\n}\n\nexport function setPlayerlessGameState(playerlessGameState) {\n  return { type: SET_PLAYERLESS_GAME_STATE, playerlessGameState }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nconst classes = makeStyles();\n\nclass Join extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      nameError: false,\n      code: '',\n      codeError: false\n    }\n  }\n\n  onNameChange(element) {\n    this.setState({\n        name: element.target.value,\n        nameError: false\n    });\n  }\n\n  onCodeChange(element) {\n    var error = false;\n    if (element.target.value.length > 4) {\n      error = true;\n    }\n\n    this.setState({\n        code: element.target.value,\n        codeError: error\n    });\n  }\n\n  onJoinClick() {\n    if (!this.state.name || !this.state.code) {\n      this.setState((prevState) => {\n        prevState.nameError = !this.state.name;\n        prevState.codeError = !this.state.code;\n        return prevState;\n      });\n      return;\n    }\n\n    // Make backend request to create game and then redirect to /game\n    fetch('/joinGame', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: this.state.name,\n        code: this.state.code\n      }),\n    })\n\n    .then(response => {\n      const statusCode = response.status;\n      const data = response.json();\n      return Promise.all([statusCode, data]);\n    })\n    .then(response => {\n      if (response[0] == 404) {\n        this.setState((prevState) => {\n          prevState.codeError = true\n          return prevState;\n        });\n      } else {\n        // Save game state\n        this.props.actions.setGameState(response[1]);\n\n        // Transition to Game page\n        this.props.history.push(\"/game\");\n      }\n    });\n  }\n\n  render() {\n    return <div className={classes.root}>\n    <Grid container spacing={3}>\n        <Grid item xs={4}/>\n      <Grid item xs={4}>\n        <TextField id=\"outlined-basic\" label=\"Code\" variant=\"outlined\" fullWidth={true}\n        vale={this.state.code}\n        onChange={this.onCodeChange.bind(this)}\n        error={this.state.codeError}\n        />\n      </Grid>\n      <Grid item xs={4}/>\n\n\n        <Grid item xs={4}/>\n      <Grid item xs={4}>\n        <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" fullWidth={true}\n        value={this.state.name}\n        onChange={this.onNameChange.bind(this)}\n        error={this.state.nameError}\n        />\n      </Grid>\n      <Grid item xs={4}/>\n\n      <Grid item xs={4}/>\n        <Grid item xs={4}>\n          <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onJoinClick.bind(this)}>\n            Join\n          </Button>\n        </Grid>\n        <Grid item xs={4}/>\n      </Grid>\n    </div>\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(null, mapDispatchToProps)(Join)\n);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nconst classes = makeStyles();\n\nclass Create extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      nameError: false\n    }\n  }\n\n  onNameChange(element) {\n    this.setState({\n        name: element.target.value,\n        nameError: false\n    });\n  }\n\n  onCreateClick() {\n    if (!this.state.name) {\n      this.setState((prevState) => {\n        prevState.nameError = true;\n        return prevState;\n      });\n      return;\n    }\n\n    // Make backend request to create game and then redirect to /game\n    fetch('/createGame', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: this.state.name\n      }),\n    })\n    .then(res => res.json())\n    .then(body => {\n      // Save game state\n      this.props.actions.setGameState(body);\n\n      // Transition to Game page\n      this.props.history.push('/game');\n      console.log(body);\n    });\n  }\n\n  render() {\n    return <div className={classes.root}>\n    <Grid container spacing={3}>\n        <Grid item xs={4}/>\n      <Grid item xs={4}>\n        <TextField id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          fullWidth={true}\n          value={this.state.name}\n          onChange={this.onNameChange.bind(this)}\n          error={this.state.nameError}/>\n      </Grid>\n      <Grid item xs={4}/>\n\n      <Grid item xs={4}/>\n        <Grid item xs={4}>\n          <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onCreateClick.bind(this)}>\n            Create\n          </Button>\n        </Grid>\n        <Grid item xs={4}/>\n      </Grid>\n    </div>\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(null, mapDispatchToProps)(Create)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\nclass AskQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n\n    this.state = {\n      question: '',\n      questionError: false,\n    }\n  }\n\n  onQuestionChange(element) {\n    this.setState({\n        question: element.target.value,\n        questionError: false\n    });\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  onKeyDown(event) {\n    if(event.key === 'Enter'){\n      this.onSubmitQuestion()\n    }\n  }\n  onKeyPress(event) {\n    if(event.key === 'Enter'){\n      event.preventDefault();\n    }\n  }\n  onSubmitQuestion() {\n    if (!this.state.question) {\n      this.setState({\n          questionError: true\n      });\n      return;\n    }\n\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n\n    fetch('/askQuestion', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token,\n        question: this.state.question\n      }),\n    });\n  }\n\n  render() {\n    return <div><Paper className=\"paper\">\n    <h1>Ask a question</h1>\n    <TextField\n          onKeyPress={this.onKeyPress.bind(this)}\n          id=\"outlined-multiline-flexible\"\n          className=\"question-text\"\n          multiline\n          rowsMax={4}\n          value={this.state.question}\n          error={this.state.questionError}\n          onChange={this.onQuestionChange.bind(this)}\n          variant=\"outlined\"\n          fullWidth={true}\n        />\n        </Paper>\n        <br/>\n        <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onSubmitQuestion.bind(this)}>\n          Submit question\n        </Button>\n        </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AskQuestion)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass Question extends Component {\n  render() {\n    var guesser;\n    for(let i = 0; i < this.props.gameState.players.length; i++) {\n      if (this.props.gameState.players[i].role === \"GUESS\") {\n        guesser = this.props.gameState.players[i];\n      }\n    }\n\n    return <Paper className=\"paper\">\n    <h1>Question from <span className=\"text-highlight\">{guesser.name}</span></h1>\n    <p className=\"question\">{this.props.gameState.game.currentQuestion}</p>\n        </Paper>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Question)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass WaitingForAnswers extends Component {\n  render() {\n    var answers = {};\n    // build answer token hash\n    if (this.props.gameState.game.answers) {\n      for (let i = 0; i < this.props.gameState.game.answers.length; i++) {\n        answers[this.props.gameState.game.answers[i].token] = true;\n      }\n    }\n\n    var players = [];\n    for(let i = 0; i < this.props.gameState.players.length; i++) {\n      if (!answers[this.props.gameState.players[i].token] && this.props.gameState.players[i].role != \"GUESS\") {\n        players.push(<span className=\"text-highlight\" key={i}>{this.props.gameState.players[i].name}</span>);\n        players.push(<span key={i + \"span\"}>, </span>)\n      }\n    }\n\n    // Remove trailing comma\n    players.splice(-1,1)\n\n    var text = \"Waiting for answers from \";\n    if (players.length == 1) {\n      var text = \"Waiting for answer from \";\n    }\n\n    return <Paper className=\"paper\">\n    <p className=\"question\">{text}{players}</p>\n        </Paper>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(WaitingForAnswers)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass WaitingForNextTurn extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  onKeyDown(event) {\n    if (this.props.gameState.player.role === \"GUESS\") {\n      if(event.key === 'Enter'){\n        this.onSubmit()\n        document.removeEventListener(\"keydown\", this.onKeyDown, false);\n      }\n    }\n  }\n\n  onSubmit() {\n    fetch('/nextTurn', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token,\n      }),\n    })\n  }\n\n  render() {\n    if (this.props.gameState.player.role === \"GUESS\") {\n      return <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onSubmit.bind(this)}>\n          Start next turn\n        </Button>\n    }\n\n    var guesser;\n    for(let i = 0; i < this.props.gameState.players.length; i++) {\n      if (this.props.gameState.players[i].role === \"GUESS\") {\n        guesser = this.props.gameState.players[i];\n      }\n    }\n\n    return <Paper className=\"paper\">\n    <p>Waiting for <span className=\"text-highlight\">{guesser.name}</span> to start next turn</p>\n        </Paper>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(WaitingForNextTurn)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass AnswerQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n\n    this.state = {\n      answer: '',\n      answerError: false,\n    }\n  }\n\n  onChange(element) {\n    this.setState({\n        answer: element.target.value,\n        answerError: false\n    });\n  }\n\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  onKeyDown(event) {\n    if(event.key === 'Enter'){\n      this.onSubmit();\n    }\n  }\n  onKeyPress(event) {\n    if(event.key === 'Enter'){\n      event.preventDefault();\n    }\n  }\n\n  onSubmit() {\n    if (!this.state.answer) {\n      this.setState({\n          questionError: true\n      });\n      return;\n    }\n\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n\n    fetch('/answerQuestion', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token,\n        answer: this.state.answer\n      }),\n    })\n  }\n\n  render() {\n    return <div><Paper className=\"paper\">\n    <h1>Answer</h1>\n    <TextField\n          onKeyPress={this.onKeyPress.bind(this)}\n          id=\"outlined-multiline-flexible\"\n          multiline\n          rowsMax={4}\n          value={this.state.question}\n          error={this.state.questionError}\n          onChange={this.onChange.bind(this)}\n          variant=\"outlined\"\n          fullWidth={true}\n        />\n        </Paper>\n        <br/>\n        <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onSubmit.bind(this)}>\n          Submit answer\n        </Button>\n        </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AnswerQuestion)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass Answer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n      flip: false\n    }\n  }\n\n  onCardClick() {\n    if (this.state.flip) return;\n\n    this.setState((prevState) => {\n      prevState.flip = true\n      return prevState;\n    })\n  }\n\n  onSelection(event) {\n    this.setState((prevState) => {\n      prevState.value = event.target.value;\n      return prevState;\n    });\n\n    // Alert parent of change\n    this.props.selection(event.target.value, this.props.id);\n  }\n\n  getCorrectAnswerToken() {\n    return this.props.answerToken;\n  }\n\n  getValue() {\n    return this.state.value;\n  }\n\n  hasValue() {\n    return this.state.value != \"\";\n  }\n\n  clearValue() {\n    this.setState((prevState) => {\n      prevState.value = \"\";\n      return prevState;\n    });\n  }\n\n  renderMenuItems() {\n    var items = [];\n    items.push(<MenuItem key={\"menu\"} value=\"\"><em>None</em></MenuItem>);\n\n    if (this.props.answeringPlayers) {\n      for (var i = 0; i < this.props.answeringPlayers.length; i++) {\n        items.push(<MenuItem key={\"menu\" + i} value={this.props.answeringPlayers[i].token}>{this.props.answeringPlayers[i].name}</MenuItem>)\n      }\n    }\n\n    return items;\n  }\n\n  render() {\n    var cardClass = this.state.flip ? \"thecard flip\" : \"thecard\";\n\n    return <div className=\"maincontroller\">\n      <div className={cardClass}>\n        <Paper className=\"front\" onClick={this.onCardClick.bind(this)}></Paper>\n        <Paper className=\"back\">\n          <div className=\"answer-row\">\n          <Grid container spacing={1}>\n            <Grid item xs={10}>\n                  <div className=\"answer\">\n                    {this.props.answer}\n                  </div>\n            </Grid>\n            <Grid itme xs={2}>\n                  <Select\n                    className=\"player-selection\"\n                    labelId=\"demo-simple-select-helper-label\"\n                    id=\"demo-simple-select-helper\"\n                    value={this.state.value}\n                    onChange={this.onSelection.bind(this)}\n                  >\n                  {this.renderMenuItems()}\n                  </Select>\n              </Grid>\n            </Grid>\n          </div>\n        </Paper>\n      </div>\n    </div>\n  }\n}\n\nexport default Answer;\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Answer from './Answer.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass Answers extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n\n    var answeringPlayers = [];\n    if (props.gameState.players) {\n      for (var i = 0; i < props.gameState.players.length; i++) {\n        if (props.gameState.players[i].token != props.guesserToken) {\n          answeringPlayers.push(props.gameState.players[i])\n        }\n      }\n    }\n\n\n\n    this.state = {\n      disableSubmit: true,\n      answeringPlayers: answeringPlayers\n    }\n  }\n\n  onSelection(token, id) {\n    var clearedValue = false;\n    // Clear all other selections\n    for (var ref in this.refs) {\n      if (this.refs[ref].props.id !== id && this.refs[ref].getValue() === token) {\n        // Clear the selection\n        clearedValue = true;\n        this.refs[ref].clearValue();\n      }\n    }\n\n    // Check if everything has values and set the state\n    var allHaveValues = token !== \"\" && !clearedValue;\n    if (allHaveValues == true) {\n      for (var ref in this.refs) {\n        if (!this.refs[ref].hasValue() && this.refs[ref].props.id != id) {\n          allHaveValues = false;\n          break;\n        }\n      }\n    }\n\n    this.setState((prevState) => {\n      prevState.disableSubmit = !allHaveValues;\n      return prevState;\n    })\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n  onKeyDown(event) {\n    if (this.state.disableSubmit) {\n      return;\n    }\n\n    if(event.key === 'Enter'){\n      this.onSubmit()\n      document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    }\n  }\n\n  onSubmit() {\n    var answers = [];\n    var answer;\n    for (var ref in this.refs) {\n      answer = this.refs[ref];\n      answers.push({\n        answer: answer.getCorrectAnswerToken(),\n        guess: answer.getValue()\n      })\n    }\n\n    fetch('/lockInGuesses', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token,\n        answers: answers\n      }),\n    })\n  }\n\n  render() {\n    var answers = this.props.gameState.game.answers;\n    var answerCards = [];\n    for (var i = 0; i < answers.length; i++) {\n      answerCards.push(<Answer\n        key={\"answers\" + i}\n        id={i}\n        ref={\"answers\" + i}\n        answer={answers[i].answer}\n        answerToken={answers[i].token}\n        answeringPlayers={this.state.answeringPlayers}\n        selection={this.onSelection.bind(this)}\n        />\n      )\n      answerCards.push(<br key={\"br\" + i}/>)\n    }\n\n    // Remove trailing br\n    answerCards.splice(-1,1)\n\n    var guesser;\n    for (var i = 0; i < this.props.gameState.players.length; i++) {\n      if (this.props.gameState.players[i].role === \"GUESS\") {\n        guesser = this.props.gameState.players[i];\n      }\n    }\n\n    return <div>\n          <Paper className=\"paper\"><h1>You're the reader.<br/><span className=\"text-highlight\">{guesser.name}</span> is guessing.</h1>\n          <p>Click to reveal answers</p>\n          {answerCards}\n          </Paper>\n          <br/>\n          <Button variant=\"contained\"\n            color=\"primary\"\n            fullWidth={true}\n            disabled={this.state.disableSubmit}\n            onClick={this.onSubmit.bind(this)}>\n            Lock in guesses\n          </Button>\n      </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Answers)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\n\nclass ResultsRow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      wasClicked: false\n    }\n  }\n\n  onLikeButtonClick() {\n    if (this.state.wasClicked) {\n      return;\n    }\n\n    // Make request\n    fetch('/likeAnswer', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.token,\n      }),\n    })\n\n    // set state\n    this.setState((prevState) => {\n      prevState.wasClicked = true;\n      return prevState;\n    })\n  }\n\n  render() {\n    var likeButtonClass = this.state.wasClicked ? \"like-cell like-button-clicked\" : \"like-cell like-button\";\n    var likeButton =\n      this.props.token == this.props.playerToken ?\n      <TableCell className=\"like-cell\"></TableCell>\n      :\n      <TableCell className={likeButtonClass} align=\"right\" onClick={this.onLikeButtonClick.bind(this)}><FontAwesomeIcon icon={faThumbsUp} /></TableCell>;\n\n    return <TableRow className={this.props.rowClass}>\n      <TableCell className=\"text-highlight\">{this.props.name} </TableCell>\n      <TableCell>{this.props.answer}</TableCell>\n      <TableCell align=\"right\">{this.props.guessedCorrectly ? \"+100\" : \"+0\"}</TableCell>\n      {likeButton}\n    </TableRow>\n  }\n}\n\nexport default ResultsRow;\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport ResultsRow from './ResultsRow.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\n\nclass Results extends Component {\n  render() {\n    // hash to name map of players\n    var playerHash = {};\n    var guesser;\n    for (var i = 0; i < this.props.gameState.players.length; i++) {\n      if (this.props.gameState.players[i].role === \"GUESS\") {\n        guesser = this.props.gameState.players[i];\n      }\n\n      playerHash[this.props.gameState.players[i].token] = this.props.gameState.players[i];\n    }\n\n    var score = 0;\n    var results = [];\n    for (var i = 0; i < this.props.gameState.game.results.length; i++) {\n      var result = this.props.gameState.game.results[i];\n      score += result.guessedCorrectly ? 100 : 0;\n      var rowClass = result.guessedCorrectly ? \"correct-row\" : \"incorrect-row\";\n\n      results.push(<ResultsRow\n        key={i}\n        rowClass={rowClass}\n        name={playerHash[result.token].name}\n        token={result.token}\n        answer={result.answer}\n        guessedCorrectly={result.guessedCorrectly}\n        playerToken={this.props.gameState.player.token}\n      />)\n\n      // results.push(<TableRow key={i} className={rowClass}>\n      //   <TableCell className=\"text-highlight\">{playerHash[result.token].name} </TableCell>\n      //   <TableCell>{result.answer}</TableCell>\n      //   <TableCell align=\"right\">{result.guessedCorrectly ? \"+100\" : \"+0\"}</TableCell>\n      //   <TableCell align=\"right\"><FontAwesomeIcon icon={faThumbsUp} /></TableCell>\n      // </TableRow>)\n    }\n\n    var bonusRow = null;\n    if (this.props.gameState.game.bonusScore > 0) {\n      score += this.props.gameState.game.bonusScore;\n      bonusRow = <TableRow>\n        <TableCell><strong>BONUS</strong></TableCell>\n        <TableCell></TableCell>\n        <TableCell align=\"right\"><strong>{\"+\" + this.props.gameState.game.bonusScore}</strong></TableCell>\n      </TableRow>;\n    }\n\n    var totalRow = <TableRow className=\"total-row\">\n      <TableCell><strong>Total</strong></TableCell>\n      <TableCell></TableCell>\n      <TableCell align=\"right\"><strong>{\"+\" + score}</strong></TableCell>\n    </TableRow>;\n\n    return <Paper className=\"paper\">\n    <h1 className=\"results-header\">Results for <span className=\"text-highlight\">{guesser.name}</span></h1>\n\n    <Table aria-label=\"simple table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Answer</TableCell>\n          <TableCell align=\"right\">Score</TableCell>\n          <TableCell className=\"like-cell\" align=\"right\"></TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {results}\n        {bonusRow}\n        {totalRow}\n      </TableBody>\n    </Table>\n        </Paper>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Results)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCrown } from '@fortawesome/free-solid-svg-icons'\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\n\n\nclass FinalResults extends Component {\n\n  renderScores() {\n    var players = [...this.props.gameState.players];\n    players.sort(function(a, b) {\n      return b.score - a.score\n    });\n\n    var rows = [];\n\n    // create score to rank hash\n    var scoreToRank = {};\n    var rank = 0;\n    for (var i = 1; i <= players.length; i++) {\n      var player = players[i - 1];\n\n      if (!scoreToRank[player.score]) {\n        rank += 1;\n        scoreToRank[player.score] = rank;\n      }\n\n      var icon = rank == 1 ? <FontAwesomeIcon icon={faCrown}/> : <span className=\"icon-placeholder\"/>\n\n      rows.push(<div key={i} className=\"final-reslts-row\">\n        <span className=\"final-results-name\">\n          {icon}\n          <span className=\"name\">{scoreToRank[player.score]}. {player.name}</span>\n        </span>\n        <span className=\"final-results-score\">{player.score}</span>\n      </div>)\n    }\n\n    return rows;\n  }\n\n  renderLikes() {\n    var players = [...this.props.gameState.players];\n    players.sort(function(a, b) {\n      return b.likes - a.likes\n    });\n\n    var rows = [];\n    var scoreToRank = {};\n    var rank = 0;\n    for (var i = 1; i <= players.length; i++) {\n      var player = players[i - 1];\n\n      if (!scoreToRank[player.likes]) {\n        rank += 1;\n        scoreToRank[player.likes] = rank;\n      }\n\n      var icon = rank == 1 ? <FontAwesomeIcon icon={faThumbsUp}/> : <span className=\"icon-placeholder\"/>\n\n      rows.push(<div key={i} className=\"final-reslts-row\">\n        <span className=\"final-results-name\">\n        {icon}\n        <span className=\"name\">{scoreToRank[player.likes]}. {player.name}</span>\n        </span>\n        <span className=\"final-results-score\">{player.likes}</span>\n      </div>)\n    }\n\n    return rows;\n  }\n\n  render() {\n    return <Grid container spacing={2}>\n      <Grid item xs={1}>\n      </Grid>\n      <Grid item xs={5}>\n        <Paper className=\"paper\">\n          <h1>Final Scores</h1>\n          <div className=\"final-scores-container\">\n            {this.renderScores()}\n          </div>\n        </Paper>\n      </Grid>\n      <Grid item xs={5}>\n        <Paper className=\"paper\">\n          <h1>Most Likes</h1>\n          <div className=\"final-scores-container\">\n            {this.renderLikes()}\n            </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={1}>\n      </Grid>\n    </Grid>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(FinalResults)\n);\n","import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions.js';\n\nimport AskQuestion from '../components/AskQuestion.js';\nimport Question from '../components/Question.js';\nimport WaitingForAnswers from '../components/WaitingForAnswers.js';\nimport WaitingForNextTurn from '../components/WaitingForNextTurn.js';\nimport AnswerQuestion from '../components/AnswerQuestion.js';\nimport Answers from '../components/Answers.js';\nimport Results from '../components/Results.js';\nimport FinalResults from '../components/FinalResults.js';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport StompClient from \"react-stomp-client\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\nimport { faGlobeAmericas } from '@fortawesome/free-solid-svg-icons'\n\n\nconst PLAYING_STATES = [\n  \"ASKING\", \"ANSWERING\", \"GUESSING\", \"RESULTS\"\n]\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameState: {},\n      openEndGameDialog: false\n    }\n  }\n\n\n\n  componentDidMount() {\n    if (!this.props.gameState.game) {\n      this.props.history.push(\"/\");\n      return;\n    }\n\n    // TODO fetch game state\n    fetch('/gameState', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token\n      }),\n    })\n  }\n\n  onStartGameClick() {\n    fetch('/startGame', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token\n      }),\n    })\n  }\n\n  onEndGame() {\n    fetch('/endGame', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        token: this.props.gameState.player.token\n      }),\n    })\n\n    this.handleEndGameDialogClose();\n  }\n\n  handleMessage(stompMessage) {\n    var newGameState = JSON.parse(stompMessage.body);\n    this.props.actions.setPlayerlessGameState(newGameState);\n  }\n\n  renderMainView(leader, reader, guesser) {\n    // Waiting to start\n    if (this.props.gameState.game.state === \"NOT_STARTED\" && leader) {\n      // Display waiting message\n      return <Paper className=\"paper\">\n        <h1>Waiting for <span className=\"text-highlight\">{leader.name}</span> to start the game.</h1>\n        <FontAwesomeIcon className=\"loading\" icon={faGlobeAmericas}/>\n      </Paper>\n    }\n\n    // Waiting for question\n    if (this.props.gameState.game.state === \"ASKING\" && this.props.gameState.player.role !== \"GUESS\") {\n      // Display waiting message\n      return <Paper className=\"paper\">\n        <h1><span className=\"text-highlight\">{leader.name}</span> is asking a question.</h1>\n      </Paper>\n    }\n\n    // Asking a question\n    if (this.props.gameState.game.state === \"ASKING\" && this.props.gameState.player.role === \"GUESS\") {\n      return <AskQuestion/>\n    }\n\n    // ANSWERING STATE\n    if (this.props.gameState.game.state === \"ANSWERING\") {\n      if (this.props.gameState.player.role === \"GUESS\") {\n        return <div><Question/>\n        <br/>\n          <WaitingForAnswers/>\n        </div>; // todo add waiting for\n      }\n\n      if (this.props.gameState.player.role !== \"GUESS\") {\n        var answers = {};\n        // build answer token hash\n        if (this.props.gameState.game.answers) {\n          for (let i = 0; i < this.props.gameState.game.answers.length; i++) {\n            answers[this.props.gameState.game.answers[i].token] = true;\n          }\n        }\n\n        var hasAnswered = answers[this.props.gameState.player.token];\n\n        return <div>\n        <Question/>\n        <br/>\n          { hasAnswered ? <div/> : <div><AnswerQuestion/><br/></div> }\n          <WaitingForAnswers/>\n        </div>;\n      }\n    }\n\n    // GUESSING STATE\n    if (this.props.gameState.game.state === \"GUESSING\") {\n      if (this.props.gameState.player.role !== \"READ\") {\n        return <div><Question/>\n          <br/>\n          <Paper className=\"paper\">\n            <h1><span className=\"text-highlight\">{reader.name}</span> is reading the answers.<br/>\n              <span className=\"text-highlight\">{guesser.name}</span> is guessing.\n            </h1>\n          </Paper>\n        </div>;\n      }\n      return <div><Question/>\n        <br/>\n        <Answers guesserToken={guesser.token}/>\n      </div>;\n    }\n\n    // Results state\n    if (this.props.gameState.game.state === \"RESULTS\") {\n      return <div>\n      <Question/>\n      <br/>\n      <Results/>\n      <br/>\n      <WaitingForNextTurn/>\n      </div>\n    }\n\n    return <div/>\n  }\n\n  onEndGameClick() {\n    this.setState((prevState) => {\n      prevState.openEndGameDialog = true;\n      return prevState;\n    });\n  }\n\n  handleEndGameDialogClose() {\n    this.setState((prevState) => {\n      prevState.openEndGameDialog = false;\n      return prevState;\n    });\n  }\n\n  renderEndGameButtom(guesser) {\n    if (this.props.gameState.game.state === \"RESULTS\" && this.props.gameState.player.token === guesser.token) {\n      return <div>\n      <Dialog\n        open={this.state.openEndGameDialog}\n        onClose={this.handleEndGameDialogClose.bind(this)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">End game</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Are you sure you want to end the game?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleEndGameDialogClose.bind(this)} color=\"primary\">\n            NO\n          </Button>\n          <Button onClick={this.onEndGame.bind(this)} color=\"primary\" autoFocus>\n            YES\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onEndGameClick.bind(this)}>\n        End game\n      </Button>\n      </div>\n    }\n\n    return null;\n  }\n\n  render() {\n    if (!this.props.gameState.game) {\n      return <div/>\n    }\n\n    if (this.props.gameState.game.state === \"FINAL_RESULTS\") {\n      return <FinalResults />\n    }\n\n    let players = [];\n    var leader;\n    var reader;\n    var guesser;\n    for(let i = 0; i < this.props.gameState.players.length; i++) {\n      if (this.props.gameState.players[i].isLeader) {\n        leader = this.props.gameState.players[i];\n      }\n\n      if (this.props.gameState.players[i].role === \"GUESS\") {\n        guesser = this.props.gameState.players[i];\n      } else if (this.props.gameState.players[i].role === \"READ\") {\n        reader = this.props.gameState.players[i];\n      }\n\n      var iconElement = null;\n      if (this.props.gameState.game.state === \"NOT_STARTED\" && this.props.gameState.players[i].isLeader) {\n        iconElement = <FontAwesomeIcon className=\"player-icon\" icon={faStar} />\n      } else if (PLAYING_STATES.indexOf(this.props.gameState.game.state) > -1 && this.props.gameState.players[i].role === \"READ\") {\n        iconElement = <FontAwesomeIcon className=\"player-icon\" icon={faBook} />\n      } else if (PLAYING_STATES.indexOf(this.props.gameState.game.state) > -1 && this.props.gameState.players[i].role === \"GUESS\") {\n        iconElement = <FontAwesomeIcon className=\"player-icon\" icon={faArrowRight} />\n      } else {\n        iconElement = <span className=\"icon-placeholder\"/>\n      }\n\n      var score = <span/>;\n      if (this.props.gameState.game.state !== \"NOT_STARTED\") {\n        score = <span className=\"player-score\">{this.props.gameState.players[i].score}</span>; // TODO add the score here\n      }\n\n      var playerRowClass = this.props.gameState.players[i].token === this.props.gameState.player.token ? \"player-row text-highlight\" : \"player-row\";\n\n      players.push(\n        <div key={i} className={playerRowClass}>\n        {iconElement}\n        <span className=\"player-name\">{this.props.gameState.players[i].name}</span>\n        {score}\n        </div>\n      );\n    }\n\n    var mainView = this.renderMainView(leader, reader, guesser);\n\n    var endGameButton = this.renderEndGameButtom(guesser);\n\n    return <StompClient\n        endpoint=\"ws://localhost:8080/socket/gs-guide-websocket\"\n        topic={\"topic/greetings/\" + this.props.gameState.game.code}\n        onMessage={this.handleMessage.bind(this)}\n      >\n      <div>\n      <Grid container spacing={2}>\n        <Grid item xs={1}>\n        </Grid>\n        <Grid item xs={3}>\n          <Paper className=\"paper\">\n            <h1 className=\"players-title\">Players</h1>\n            <div className=\"players-list\">\n            {players}\n            </div>\n\n            {this.props.gameState.player.isLeader && this.props.gameState.game.state === \"NOT_STARTED\" ?\n              <Button variant=\"contained\" color=\"primary\" fullWidth={true} onClick={this.onStartGameClick.bind(this)}>\n                Start game\n              </Button>\n               : <div/>}\n          </Paper>\n\n          <br/>\n          <Paper className=\"paper\">\n          <div>Code: {this.props.gameState.game.code}</div>\n          </Paper>\n          <br/>\n          {endGameButton}\n\n        </Grid>\n\n        <Grid item xs={7}>\n          {mainView}\n        </Grid>\n      </Grid>\n    </div>\n    </StompClient>\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(\"REDUX\");\n  console.log(state);\n\n  return {\n    gameState: state.gameState\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \tactions: bindActionCreators(actions, dispatch)\n    };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Game)\n);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Nav from './components/Nav.js';\n\nimport Home from './pages/Home.js';\nimport Join from './pages/Join.js';\nimport Create from './pages/Create.js';\nimport Game from './pages/Game.js';\n\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\n\nimport { withRouter } from 'react-router-dom';\nimport { Switch, Route } from 'react-router-dom'\n\nimport purple from '@material-ui/core/colors/purple';\nimport blue from '@material-ui/core/colors/blue';\nimport red from '@material-ui/core/colors/red';\n\n\nconst theme = createMuiTheme({\n  root: {\n    flexGrow: 1,\n  },\n  palette: {\n    type: 'dark',\n    primary: blue,\n    secondary: red,\n  },\n  status: {\n    danger: 'orange',\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <ThemeProvider theme={theme}>\n      <Nav/>\n      <div className=\"app-body\">\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route exact path='/join' component={Join}/>\n          <Route path='/create' component={Create}/>\n          <Route path='/game' component={Game}/>\n          <Route component={Home}/>\n        </Switch>\n      </div>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  APP_NAME: 'loaded-question'\n};\n","import Cookies from 'universal-cookie';\nimport config from '../config.js';\n\nimport { combineReducers } from 'redux'\nimport {\n  SET_GAME_STATE,\n  SET_PLAYERLESS_GAME_STATE,\n} from '../actions/actions.js'\n\nfunction gameState(state = [], action) {\n  const cookies = new Cookies();\n\n  switch (action.type) {\n    case SET_GAME_STATE:\n      state = action.gameState;\n      // Save the user in the cookies\n      cookies.set(config.APP_NAME + '-user', state, { path: '/' });\n      return state;\n    case SET_PLAYERLESS_GAME_STATE:\n      var tempState = state\n      tempState.game = action.playerlessGameState.game;\n      tempState.players = action.playerlessGameState.players;\n\n      // Set the player's state\n      for (var i = 0; i < tempState.players.length; i++) {\n        if (tempState.player.token === tempState.players[i].token) {\n          tempState.player.role = tempState.players[i].role;\n          console.log(\"role : \" + tempState.player.role);\n          break;\n        }\n      }\n\n      cookies.set(config.APP_NAME + '-user', tempState, { path: '/' });\n      return {\n        game: action.playerlessGameState.game,\n        players: action.playerlessGameState.players,\n        player: tempState.player\n      }\n    default:\n      return state;\n  }\n}\n\nconst reducers = combineReducers({\n  gameState\n})\n\nexport default reducers\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport reducers from './reducers/reducers.js';\nimport Cookies from 'universal-cookie';\nimport config from './config.js';\n\nconst cookies = new Cookies();\nvar gameState = cookies.get(config.APP_NAME + '-user');\n\nconsole.log(gameState);\nconst store = createStore(reducers, {gameState});\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}